Серверная часть обработки записей рабочего времени.

HW3
Создание:

 контроллеров:
    TimesheetController
    ProjectController

 сервисов:
    TimesheetService
    ProjectService

 репозиториев:
    TimesheetRepository
    ProjectRepository

 А также основных CRUD-методов для работы с данными



HW4
Обновлены некоторые методы контроллеров -> сервисов -> репозиториев
Изучен принцип работы ExceptionHandler для разного вида контроллеров
Добавлены DTO для удобной работы с Thymeleaf + реализованы сами страницы (в т.ч. для статусов 404 и 500)
Добавлены гиперссылки в страницы timesheets, projects и тд



HW5
По порядку:
    добавлена сущность Employee
    контроллеры:
        EmployeeController
        EmployeePageController
    сервисы:
        EmployeeService
        EmployeePageService
    репозитории:
        EmployeeRepository

Для визуализации сотрудников, по аналогии с другими сущностями, добавлено 2 страницы,
    а также обновлен список DTO и их составляющих для визуализации

Убран редирект при ошибке возврата страницы (пока что)

Обновлена логика работы каждого сервиса и контроллера
В репозитории добавлены некоторые методы для корректной работы (некоторые переписаны)

Из особенностей:
    - метод фильтрации таймшитов по дате изменен (см TimesheetController -> findAll());

    - метод фильтрации сотрудников работает с учетом текущего положения в штате:
        по умолчанию фильтрация происходит только по тем, кто в штате числится
        увольнение сотрудника НЕ убирает его из БД, а лишь ОБНОВЛЯЕТ поле stillWork на false;
        это сделано, чтобы не терять информацию об уже законченных проектах и сохраненных таймшитах;
        следовательно, чтобы найти всех, нужно указать параметр ?stillWork=false;

    - при создании сущностей вручную придерживаться последовательности: сотрудник -> проект -> таймшиты
        тк идея в том, что база сотрудников одна и они могут существовать обособленно;
        проект также может обойтись без никого (в тч сотрудника, тк ответственных ролей у нас нет)
        а вот таймшит завязан сразу на обоих, тк без них - он бессмысленен;

    - при запуске приложения происходит инициализация данных из файла InputDataInitializer.java
        граничные значения можно выбрать любые
        ну если бы да кабы делался сервис много шире, то у сотрудника можно было бы поставить еще флажок,
        что он УЖЕ задействован где-то и поставить какое-то ограничение на это кол-во (одновременных),
        чтобы распределять нагрузку хоть как-то;
        а там уже и флажки состояния у проектов и прочее

    - есть 1 @Deprecated метод в ProjectRepository,
        оставил как память
