Есть несколько способов заинжектить микросервис-модуль куда-то еще
- прописать логику
    + в основном микре добавить зависимость
    + в основном микре сделать конфиг, чтобы поиск бинов был правильным
    + в основном микре пользоваться
    (вручную полностью)

- прописать логику
    + добавить файл конфигурации
    + в основном микре добавить зависимость
    + в основном в точке входа добавить аннотацию @Import(название конфига.class)
    (вручную, но легче)

- прописать логику
    + добавить файл конфигурации
    + создать META-INF и прописать там название конфига (полный путь)
    + в основном микре добавить зависимость
    (авто подключение)

Дальше есть возможность конфигурировать это все.
В нашем случае добавлен вариант описания уровня логирования.
Необходимо:
    - класс уровней логгирования (у нас енам)
    - класс properties (NewLoggingProperties), который берет значения из енама в
        зависимости от параметра в application.yaml нашего основного микросервиса
    - некоторые анноатции в этих классах (описаны внутри)

В application.yaml указываем тот уровень, что описан в нашем проперти файле
тк Level это енам, можно не делать собственный енам, а оставить оригинальный и ориентироваться по нему

В .yaml мы добавили флажок print-args, который показывает, нужно ли применять правила аспекта для
    мест, куда мы его поставили, типа быстро включить/выключить, если понадобится;
Потом в коде это проверяли и все такое.. Есть вариант попроще.
А именно - аннотация @ConditionalOnProperty(..) над классом-конфигурацией
    она как бы говорит о том, что данный аспект будет работать, если этот параметр имеет точно определенное значение
    это можно сделать вручную, как я делал ранее, но так вроде лаконичнее

Ключевая особенность будет состоять в том, что если параметр enable-aspect выключен на уровне .yaml,
 то аннотация ВООБЩЕ НЕ СРАБОТАЕТ
А если в yaml включено, то внутри уже будет проверка на printArgsInside() как параметра

(сперва управляем всем аспектом в целом, а дальше проверяем, что внутри этого апсекта)
